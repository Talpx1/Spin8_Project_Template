#!/usr/bin/env bash

KERNEL="$(uname -s)"
CONTAINER_NAME="spin8_wordpress"

function check_kernel {
    case "$KERNEL" in
        Linux*) 
            KERNEL="Linux"
        ;;

        Darwin*)           
            KERNEL="Darwin"
        ;;

        *)                  
            KERNEL="unsupported"
            display_unsupported_kernel_message
        ;;
    esac
}

function display_unsupported_kernel_message {
    echo "Unsupported OS ($KERNEL)."
    echo "You won't be able to use spin8 install/build/up/down/recreate."
    echo
    echo "!!! If you are on windows, install and run Spin8 inside WSL2 to use all the features !!!"
    echo
    echo "You can still run Spin8 manually with these steps:" 
    echo "1. copy the .env.example file and rename the copied file .env" 
    echo "2. customize the settings in the .env file" 
    echo "3. start the containers using 'docker compose up -d' or 'docker-compose up -d'" 
    echo "4. install and configure wordpress using 'docker exec $CONTAINER_NAME spin8_install_wp'" 
    echo "5. use any other Spin8 command via './vendor/bin/spin8 <command>'" 

    exit 1
}

function check_if_docker_is_running {
    if ! docker info > /dev/null 2>&1; then
        echo "Docker is not running, please start docker and try again."

        exit 1
    fi
}

function check_if_docker_compose_exists {
    if [ ! -f "docker-compose.yml" ]; then
        echo "Unable to find docker-compose.yml"
        echo "Your installation may be corrupted, please clone the Spin8 Project Template repo again and retry."

        exit 1
    fi
}

function check_if_container_is_running {
    if [[ ! -z $( docker ps -f name="$CONTAINER_NAME" | grep "$CONTAINER_NAME" 2> /dev/null ) ]]; then
        IS_CONTAINER_RUNNING=true
    else
        IS_CONTAINER_RUNNING=false
    fi
}

function detect_docker_compose_command {
    if command -v docker-compose &> /dev/null; then
        DOCKER_COMPOSE="docker-compose"
    else
        DOCKER_COMPOSE="docker compose"
    fi
}

function resolve_command_form_args {
    if [ $# -eq 0 ]; then
        help_command
        
        exit 3
    fi

    if [[ "$1" == 'install' || "$1" == 'up' || "$1" == 'down' || "$1" == 'execute' || "$1" == 'bash' ]]; then
        local COMMAND="${1}_command"

        shift 1

        "$COMMAND" $@

        exit 0
    fi

    if [[ "$IS_CONTAINER_RUNNING" == true ]]; then
        proxy_command_to_php $@
        exit 0
    else
        if [[ "$1" == "help" || "$1" == "-h" || "$1" == "-help" || "$1" == "--help" ]]; then
            help_command
            exit 3
        else
            echo "Invalid command $1"
            echo
            help_command
            exit 3
        fi
    fi
}

function help_command {
    echo "Spin8 Help:"
    echo
    echo "The container is not running, that's either because you are installing Spin8 for the first time (in this case run 'spin8 install') or you forgot to run 'spin8 up'"
    echo "In this state, you can access these commands:"
    echo
    echo "spin8 install    -    launch the Spin8 installation wizard"
    echo "spin8 up         -    start the Spin8 containers"
    echo "spin8 down       -    stop the Spin8 containers"
    echo "spin8 bash       -    access the container terminal (use 'spin8 bash root' to access the terminal as root)"
    echo "spin8 execute    -    execute a command in the container (use 'spin8 execute root' to execute a command as root)"
    echo 
    echo "Access more commands by running the container"
}

function install_command {
    echo "Welcome to the Spin8 Installation"
    echo
    echo "This guided installation will help you configure the needed settings to build your plugin."
    echo "You will also be provided with default or generated values for the settings that you will be asked."
    echo "In case those default/generated values encounter your necessities, just type nothing and press Enter."
    echo
    
    #PLUGIN NAME
    echo "First of all, your plugin must have a name."
    echo "That's just the display name of the plugin, so you can put spaces, special characters, ..."
    read -p "Enter the name of your plugin (default: Spin8 Dev): " INST_PLUGIN_NAME
    if [[ -z "$INST_PLUGIN_NAME" ]]; then 
        local INST_PLUGIN_NAME='Spin8 Dev'
    fi
    local INST_PLUGIN_NAME=$(printf '%s\n' "$INST_PLUGIN_NAME" | sed -e 's/[\/&]/\\&/g')


    echo
    echo
    echo

    #PLUGIN SLUG
    local GENERATED_PLUGIN_SLUG=spin8-dev
    if command -v iconv > /dev/null 2>&1 && command -v tr > /dev/null 2>&1; then
        local GENERATED_PLUGIN_SLUG=$( echo "${INST_PLUGIN_NAME//[._ ]/-}" | tr '[:upper:]' '[:lower:]' | iconv -f utf8 -t ASCII//TRANSLIT )
    fi
    echo "Your plugin will also need a slug."
    echo "A slug is a unique identifier, used by WordPress to univocally refer to your plugin and avoid collisions with other plugins."
    echo "Slugs can only contain lowercase letters and numbers, any special character besides the hyphen (-) is forbidden. [a-z0-9-]"
    echo "For this reason, please provide a slug that will most likely be unused by others."
    echo "Usually, the slug is the lowercase display name with stripped accents and spaces replaced with hyphens."
    read -p "Enter the slug for your plugin (generated: $GENERATED_PLUGIN_SLUG): " INST_PLUGIN_SLUG
    if [[ -z "$INST_PLUGIN_SLUG" ]]; then 
        local INST_PLUGIN_SLUG="$GENERATED_PLUGIN_SLUG"
    fi
    local INST_PLUGIN_SLUG=$(printf '%s\n' "$INST_PLUGIN_SLUG" | sed -e 's/[\/&]/\\&/g')

    echo
    echo
    echo

    #PLUGIN NAMESPACE
    local GENERATED_PLUGIN_NAMESPACE=Spin8Dev
    if command -v sed > /dev/null 2>&1 && command -v tr > /dev/null 2>&1; then
        local GENERATED_PLUGIN_NAMESPACE=$( echo "$INST_PLUGIN_SLUG" | sed -e 's/\b./\U&/g' | tr -d '-' )
    fi
    echo "In order for yor plugin classes to not clash with other plugin's classes, you need a unique namespace."
    echo "A namespace is similar to a slug, but instead of using it to uniquely identify your plugin, it's used to group all your plugin classes under the same family."
    echo "This is useful to let PHP know that all those classes belong to your plugin, and to search those classes only in tour plugin package."
    echo "Pretty often, the namespace (we are talking about the root namespace) is your plugin name, without spaces and written in pascal case notation."
    echo "It's also fine to use your slug, removing the hyphens and following the pascal case convention."
    read -p "Enter the namespace for your plugin (generated: $GENERATED_PLUGIN_NAMESPACE): " INST_PLUGIN_NAMESPACE
    if [[ -z "$INST_PLUGIN_NAMESPACE" ]]; then 
        local INST_PLUGIN_NAMESPACE="$GENERATED_PLUGIN_NAMESPACE"
    fi
    local INST_PLUGIN_NAMESPACE=$(printf '%s\n' "$INST_PLUGIN_NAMESPACE" | sed -e 's/[\/&]/\\&/g')
    
    echo
    echo
    echo

    #PLUGIN FOLDER
    echo "Now you will need to specify the name of the folder containing your plugin."
    echo "It's STRONGLY recommended to use the same value of the slug, other settings may cause problem with how WordPress works."
    echo "If you do not have particular necessities, just accept the default value proposed."
    read -p "Enter name for your plugin folder (default: $INST_PLUGIN_SLUG): " INST_PLUGIN_FOLDER
    if [[ -z "$INST_PLUGIN_FOLDER" ]]; then 
        local INST_PLUGIN_FOLDER="$INST_PLUGIN_SLUG"
    fi
    local INST_PLUGIN_FOLDER=$(printf '%s\n' "$INST_PLUGIN_FOLDER" | sed -e 's/[\/&]/\\&/g')

    echo
    echo
    echo

    #PLUGIN ABS PATH
    echo "If you want or need to, you can now specify the absolute path where your plugin will be located."
    echo "In case you decide to manually define this, DO NOT specify the folder name again, as it will be automatically appended."
    echo "Just make sure to add a trailing slash to your path."
    echo "Like before, it's HEAVILY recommended to stick with the default value."
    read -p "Enter the absolute path, without folder, where your plugin will be located (default: /var/www/html/wp-content/plugins/): " INST_PLUGIN_ABS_PATH
    if [[ -z "$INST_PLUGIN_ABS_PATH" ]]; then 
        local INST_PLUGIN_ABS_PATH="/var/www/html/wp-content/plugins/"
    fi
    local INST_PLUGIN_ABS_PATH+="$INST_PLUGIN_FOLDER"
    local INST_PLUGIN_ABS_PATH=$(printf '%s\n' "$INST_PLUGIN_ABS_PATH" | sed -e 's/[\/&]/\\&/g')

    echo
    echo
    echo

    #SSH
    local CLONE_SSH_KEYS=''
    while [[ "$CLONE_SSH_KEYS" != "N" && "$CLONE_SSH_KEYS" != "n" && "$CLONE_SSH_KEYS" != "Y" && "$CLONE_SSH_KEYS" != "y" ]]; do
        read -p "Would you like to clone your SSH key in the container? (useful, fo example, to access your GitHub repo) (Y/N): " CLONE_SSH_KEYS
    done

    echo
    echo
    echo

    if [[ "$CLONE_SSH_KEYS" == "Y" || "$CLONE_SSH_KEYS" == "y" ]]; then
        #SSH PATH
        if [ ! -z "${HOME}" ]; then
            local GENERATED_SSH_PATH="$HOME/.ssh"
        elif [ ! -z "${USER}" ]; then
            local GENERATED_SSH_PATH="/home/$USER/.ssh"
        elif command -v whoami > /dev/null 2>&1; then
            local GENERATED_SSH_PATH="/home/$(whoami)/.ssh"
        else
            echo "The HOME and USER variables are unset and the whoami command is unavailable."
            echo "Unable to generate the default suggestion for the ssh path, you will have to enter it manually."
        fi

        echo "Specify the path where your ssh key is stored (useful, fo example, to access your GitHub repo)."
        echo "Do not add the ssh key file name to this path."
        echo "If unsure, you are probably fine with the default."
        read -p "SSH key path (default: $GENERATED_SSH_PATH): " INST_SSH_PATH
        if [[ -z "$INST_SSH_PATH" ]]; then 
            local INST_SSH_PATH="$GENERATED_SSH_PATH"
        fi
        local INST_SSH_PATH=$(printf '%s\n' "$INST_SSH_PATH" | sed -e 's/[\/&]/\\&/g')

        echo
        echo
        echo

        #SSH KEY NAME
        echo "Specify name of the ssh key to copy. Do not add the file extension."
        echo "If unsure, you are probably fine with the default again."
        read -p "SSH key name (default: id_ed25519): " INST_SSH_KEY_NAME
        if [[ -z "$INST_SSH_KEY_NAME" ]]; then 
            local INST_SSH_KEY_NAME="id_ed25519"
        fi
        local INST_SSH_KEY_NAME=$(printf '%s\n' "$INST_SSH_KEY_NAME" | sed -e 's/[\/&]/\\&/g')
    fi

    echo
    echo
    echo

    #WORDPRESS VERSION
    echo "You can now enter the WordPress version that will be installed and used to test your plugin."
    echo "Valid values are 'latest', 'nightly' or a version number"
    read -p "Enter the WordPress version (default: latest): " INST_WORDPRESS_VERSION
    if [[ -z "$INST_WORDPRESS_VERSION" ]]; then 
        local INST_WORDPRESS_VERSION="latest"
    fi
    local INST_WORDPRESS_VERSION=$(printf '%s\n' "$INST_WORDPRESS_VERSION" | sed -e 's/[\/&]/\\&/g')
    
    echo
    echo
    echo

    #WORDPRESS LOCALE
    echo "You can choose in which language you would prefer your WordPress installation to be."
    echo "You can find the available language codes here: https://translate.wordpress.org/"
    read -p "Enter the language code for your WordPress installation (default: en_US): " INST_WORDPRESS_LOCALE
    if [[ -z "$INST_WORDPRESS_LOCALE" ]]; then 
        local INST_WORDPRESS_LOCALE="en_US"
    fi
    local INST_WORDPRESS_LOCALE=$(printf '%s\n' "$INST_WORDPRESS_LOCALE" | sed -e 's/[\/&]/\\&/g')

    echo
    echo
    echo

    #creating the .env file
    echo "Generating the .env file..."
    cp .env.example .env
    sed -i "/^PLUGIN_NAME=/s/=.*/='$INST_PLUGIN_NAME'/" .env
    sed -i "/^PLUGIN_SLUG=/s/=.*/='$INST_PLUGIN_SLUG'/" .env
    sed -i "/^PLUGIN_NAMESPACE=/s/=.*/='$INST_PLUGIN_NAMESPACE'/" .env
    sed -i "/^PLUGIN_FOLDER=/s/=.*/='$INST_PLUGIN_FOLDER'/" .env
    sed -i "/^PLUGIN_ABS_PATH=/s/=.*/='$INST_PLUGIN_ABS_PATH'/" .env
    sed -i "/^WORDPRESS_VERSION=/s/=.*/='$INST_WORDPRESS_VERSION'/" .env
    sed -i "/^WORDPRESS_LOCALE=/s/=.*/='$INST_WORDPRESS_LOCALE'/" .env

    if [[ "$CLONE_SSH_KEYS" == "Y" || "$CLONE_SSH_KEYS" == "y" ]]; then
        sed -i "/^SSH_PATH=/s/=.*/='$INST_SSH_PATH'/" .env
        sed -i "/^SSH_KEY_NAME=/s/=.*/='$INST_SSH_KEY_NAME'/" .env
    fi

    #renaming plugin file
    echo "Renaming plugin file..."
    mv "plugin-name.php" "$INST_PLUGIN_SLUG.php"

    #starting containers
    up_command "-d"
    sleep 5

    #installing WordPress
    docker "exec" "-u" "$WWW_USER_ID" "$CONTAINER_NAME" "spin8_install_wp"

    #installing plugin dependencies
    docker "exec" "-u" "$WWW_USER_ID" "$CONTAINER_NAME" "composer" "install" "--working-dir=$PLUGIN_ABS_PATH"

    #generating plugin file's header comment
    proxy_command_to_php "generate" "headers"
}

function up_command {
    detect_docker_compose_command

    load_env_file

    "$DOCKER_COMPOSE" "up" "$@"
}

function down_command {
    detect_docker_compose_command

    load_env_file

    "$DOCKER_COMPOSE" "down" "$@"
}

function execute_command {
    local USER='spin8'
    if [[ "$1" == "root" ]]; then
        local USER='root'
        
        shift 1
    fi

    docker "exec" "-u" "$USER" "$CONTAINER_NAME" "$@"
}

function bash_command {
    local USER='spin8'
    if [[ "$1" == "root" ]]; then
        local USER='root'
        
        shift 1
    fi

    docker "exec" "-it" "-u" "$USER" "$CONTAINER_NAME" "bash"
}

function proxy_command_to_php {
    load_env_file
    
    if [[ "$1" == "php" ]]; then
        shift 1
    fi

    "docker" "exec" "$CONTAINER_NAME" "$PLUGIN_ABS_PATH/vendor/bin/spin8" "$@"
}

function load_env_file {
    export WWW_GROUP_ID=${WWW_GROUP_ID:-"$(id -g)"}

    if [[ -z "$UID" ]]; then
        export UID="$(id -u)"
    fi

    export WWW_USER_ID=${WWW_USER_ID:-${UID:-"$(id -g)"}}

    set -a
    . ./.env
    set +a
}



check_kernel
check_if_docker_is_running
check_if_docker_compose_exists
check_if_container_is_running
resolve_command_form_args $@